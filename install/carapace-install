#!/usr/bin/env zsh
#
# Generate and install all the Carapace files
#
set -e

#
# Prepare
#

# Force umask
umask 022

# Try to autodetect carapace folder
export CARAPACE="${0:A:h:h}"

if [ ! -d "$CARAPACE" ]; then
    export CARAPACE="$HOME/.carapace"

    if [ ! -d "$CARAPACE" ]; then
        >&2 echo "Unable to find carapace folder!"
        exit 1
    fi
fi

export PATH="$CARAPACE/install:$PATH"
export CARAPACE_GENERATED="$CARAPACE/generated"
export CARAPACE_GENERATED_INTERMEDIATE="$CARAPACE/generated/intermediate"
export CARAPACE_MODULES=""
export CARAPACE_INDENT=""

carapace-message "boldcyan" "Carapace Installation Starting..."
export CARAPACE_INDENT=" >"
carapace-message "cyan" "using source folder '$CARAPACE'"

#
# Create any necessary folders that might not exist yet.
#

carapace-message "cyan" "creating necessary folders"

mkdir -p "$HOME/bin/carapace" &> /dev/null || :
mkdir -p "$CARAPACE_GENERATED_INTERMEDIATE" &> /dev/null || :
mkdir -p "$HOME/.config" &> /dev/null || :
(mkdir -p "$HOME/.ssh" &> /dev/null && chmod 700 "$HOME/.ssh") || :
mkdir -p "$HOME/.host/config" &> /dev/null || :
mkdir -p "$HOME/.host/config/login_certs" &> /dev/null || :
mkdir -p "$HOME/.host/modules" &> /dev/null || :
mkdir -p "$HOME/.host/bin" &> /dev/null || :

#
# Functions
#

#
# Populate some readmes for local host settings
#

if [ ! -f "$HOME/.host/README.md" ]; then
    carapace-redirect "$CARAPACE/docs/Host.md" "$HOME/.host/README.md"
fi

if [ ! -f "$HOME/.host/config/README.md" ]; then
    carapace-redirect "$CARAPACE/docs/Host-Config.md" "$HOME/.host/config/README.md"
fi

#
# Install our installation and update files
#

carapace-redirect "$CARAPACE/install/carapace-install" "$HOME/bin/carapace/carapace-install"
carapace-redirect "$CARAPACE/install/carapace-update" "$HOME/bin/carapace/carapace-update"
carapace-redirect "$CARAPACE/install/carapace-uninstall" "$HOME/bin/carapace/carapace-uninstall"

#
# Start by creating the boilerplate/headers for the generated files
#

carapace-message "cyan" "setting up generated file boilerplate"
for i in crontab gitconfig gitignore i3config profile ssh_config ssh_rc zshrc hgrc hgignore; do
    cp $CARAPACE/docs/templates/$i-template $CARAPACE_GENERATED_INTERMEDIATE/generated-$i

    echo "#" >> $CARAPACE_GENERATED_INTERMEDIATE/generated-$i
    echo "# Generated: $(date -u)" >> $CARAPACE_GENERATED_INTERMEDIATE/generated-$i
    echo "#" >> $CARAPACE_GENERATED_INTERMEDIATE/generated-$i
    echo >> $CARAPACE_GENERATED_INTERMEDIATE/generated-$i
done

( # vimrc
    cp $CARAPACE/docs/templates/vimrc-template $CARAPACE_GENERATED_INTERMEDIATE/generated-vimrc

    echo "\"" >> $CARAPACE_GENERATED_INTERMEDIATE/generated-vimrc
    echo "\" Generated: $(date -u)" >> $CARAPACE_GENERATED_INTERMEDIATE/generated-vimrc
    echo "\"" >> $CARAPACE_GENERATED_INTERMEDIATE/generated-vimrc
    echo >> $CARAPACE_GENERATED_INTERMEDIATE/generated-vimrc
)

#
# Clear out broken modules
#
(
    carapace-message "cyan" "cleaning up broken modules"
    export CARAPACE_INDENT="  ${CARAPACE_INDENT}"

    cd $CARAPACE/modules

    if [ -n "$(ls $CARAPACE/modules 2>/dev/null)" ]; then
      for i in *; do
        if [ -h "$i" -a ! -e "$i" ]; then
          # Broken symlink
          carapace-message "magenta" "- $i"
          rm -f "$i"
        fi
      done
    fi
)

#
# Run through the bundles and link their modules
#
(
    carapace-message "cyan" "evaluating bundles"
    export CARAPACE_INDENT="  ${CARAPACE_INDENT}"

    cd $CARAPACE/bundles
    for i in *; do
        if [ -d "$i" ]; then
            carapace-message "boldblue" "processing bundle $i"

            carapace-install-bundle "$(readlink -f $i)" "$CARAPACE/modules" "$CARAPACE_GENERATED_INTERMEDIATE" || (
                carapace-message "boldred" "$i bundle failed!"
            )
        fi
    done

    if [ -d "$HOME/.host/modules" ]; then
        carapace-message "boldblue" "processing bundle HOST"

        carapace-install-bundle "$(readlink -f "$HOME/.host/modules")" "$CARAPACE/modules" "$CARAPACE_GENERATED_INTERMEDIATE" "HOST" || (
                carapace-message "boldred" "HOST bundle failed!"
            )
    fi

    export CARAPACE_INDENT="${CARAPACE_INDENT:2}"
)

#
# Now start checking modules
#
# Failed modules are written to the temporary file specified
#
module_failed=0
failed_modules=$(mktemp)

(
    if [ ! -w "$failed_modules" ]; then
      carapace-message "boldred" "Can't write failed module names!!"
    fi

    err=0
    carapace-message "cyan" "evaluating modules"
    export CARAPACE_INDENT="  ${CARAPACE_INDENT}"

    cd $CARAPACE/modules
    for i in *; do
        if [ -d "$i" ]; then
            carapace-install-module "$i" "$(readlink -f $i)" "$CARAPACE_GENERATED_INTERMEDIATE" || {
                carapace-message "boldred" "$i module failed!"
                err=1
                echo "$i" >> "$failed_modules"
            }
        fi
    done

    export CARAPACE_INDENT="${CARAPACE_INDENT:2}"

    exit $err
) || module_failed=1

#
# Finalize zshrc
#

cat >> "${CARAPACE_GENERATED_INTERMEDIATE}/generated-zshrc" <<EOF
#############################
# Module Inclusion Finished #
#############################

EOF

# Clear module-level variables
cat >> "${CARAPACE_GENERATED_INTERMEDIATE}/generated-zshrc" <<EOF

#
# Clearing module variables
#
export CARAPACE_CURRENT_MODULE=""
export CARAPACE_CURRENT_MODULE_PATH=""

EOF

#
# Clean up old generated files and move the new ones into place
#

# NOTE: We only want to deleted the generated files, keep the timestamps or it may cause trouble
carapace-message "cyan" "clearing old generated files"
if [ -d "${CARAPACE_GENERATED}" -a -e "${CARAPACE_GENERATED}/generated-zshrc" ]; then
    rm -f $CARAPACE_GENERATED/generated* &> /dev/null || :
fi

carapace-message "cyan" "installing new generated files"
mv "${CARAPACE_GENERATED_INTERMEDIATE}"/* "${CARAPACE_GENERATED}/"

#
# Link up our generated files
#

carapace-redirect "$CARAPACE_GENERATED/generated-gitconfig" "$HOME/.gitconfig"
carapace-redirect "$CARAPACE_GENERATED/generated-gitignore" "$HOME/.gitignore"
carapace-redirect "$CARAPACE_GENERATED/generated-hgrc" "$HOME/.hgrc"
carapace-redirect "$CARAPACE_GENERATED/generated-hgignore" "$HOME/.hgignore"
carapace-redirect "$CARAPACE_GENERATED/generated-profile" "$HOME/.profile"
carapace-redirect "$CARAPACE_GENERATED/generated-ssh_config" "$HOME/.ssh/config"
carapace-redirect "$CARAPACE_GENERATED/generated-ssh_rc" "$HOME/.ssh/rc"
carapace-redirect "$CARAPACE_GENERATED/generated-vimrc" "$HOME/.vimrc"

if [ -d "$HOME/.i3" ]; then
    carapace-redirect "$CARAPACE_GENERATED/generated-i3config" "$HOME/.i3/config"
fi

# Zshrc links to the script that updates Carapace first
carapace-redirect "$CARAPACE/zshrc-update" "$HOME/.zshrc"

#
# Install crontab
#

which crontab &>/dev/null
if [ $? -eq 0 ]; then
	crontab "$CARAPACE_GENERATED/generated-crontab"
fi

#
# Should be all good!
#

export CARAPACE_INDENT="${CARAPACE_INDENT:2}"
carapace-message "boldcyan" "Carapace Installation Complete!"

if [ $module_failed -ne 0 ]; then
    carapace-message "boldred" "One or more modules failed!"

    if [ -r "$failed_modules" ]; then
      export CARAPACE_INDENT="  ${CARAPACE_INDENT}"

      for mod in $(cat "$failed_modules"); do
        carapace-message "red" "!! ${mod}"
      done

      export CARAPACE_INDENT="${CARAPACE_INDENT:2}"
    fi
    exit 1
fi

# Clean up failed module list
rm -f "$failed_modules" &> /dev/null || :


