#!/usr/bin/env zsh
#
# Pull the images from the images/folder, and convert them as appropriate for backgrounds and lock screens.
#

ROOT="${0:A:h}/.."
AR_ERR_MAX=32
SOURCE_PATH="${ROOT}/images/"
BACKGROUND_PATH="${ROOT}/dotfiles/backgrounds"
LOCKSCREEN_PATH="${ROOT}/dotfiles/lockscreens"

# TODO: Dynamically figure out sizes
BACKGROUND_SIZES=( "1920x1080" "3440x1440" )
LOCKSCREEN_SIZES=( "1920x1080" "3440x1440" "5360x1440" )

# Call with <actual> <expected>
percent_error() {
    local actual=$1
    local expected=$2
    
    local diff=$(bc -l <<< "scale=3; d=$actual - $expected; if (d < 0) -(d) else d")
    local err=$(bc -l <<< "scale=0; ($diff * 100) / $expected")

    echo $err
}

image_dimensions() {
    local filename=$*
    local dims="`identify -format '%wx%h\n' \"$filename\"`"

    echo $dims
}

maybe_convert_image() {
    local sourceFile=$1
    local sourceWidth=$2
    local sourceHeight=$3
    local targetFile=$4
    local targetWidth=$5
    local targetHeight=$6

    # See how far apart the aspect ratios are
    local sourceAR=$(bc -l <<< "scale=3; $sourceWidth / $sourceHeight")
    local targetAR=$(bc -l <<< "scale=3; $targetWidth / $targetHeight")
    local err=$(percent_error $sourceAR $targetAR)
    echo "-- source AR: $sourceAR -- target AR: $targetAR -- err: $err"

    # If they're too far apart, skip this combo
    if [ $err -ge $AR_ERR_MAX ]; then
        echo "-- NOT Converting to $targetWidth x $targetHeight for $targetFile (err: $err)"
        return
    fi

    echo "-- Converting to $targetWidth x $targetHeight to: $targetFile"

    (
        set -x
        convert $sourceFile \
            -resize ${targetWidth}x${targetHeight}^ \
            -gravity center \
            -background '#111111' \
            -extent ${targetWidth}x${targetHeight} \
            $targetFile 
    )
}

run_conversion() {
    local sourceFile=$1
    local sourceWidth=$2
    local sourceHeight=$3
    local targetDimensions=(${=4})
    local targetPath=$5

    echo "-- Checking $sourceFile (${sourceWidth}x${sourceHeight}) into $targetPath."
    echo "-- Combos: "
    print -c $targetDimensions

    for targetDims in $targetDimensions; do
        local targetWidth="`echo $targetDims | cut -dx -f 1`"
        local targetHeight="`echo $targetDims | cut -dx -f 2`"
        local targetFile="${targetPath:a}/$targetDims/${sourceFile:t:r}.png"

        maybe_convert_image $sourceFile $sourceWidth $sourceHeight $targetFile $targetWidth $targetHeight
    done
}

convert_image() {
    local filename=$*
    echo "-- File: |$filename|"
    local dims="$(image_dimensions $filename)"
    echo "-- Dims: |$dims|"
    local width="`echo $dims | cut -dx -f 1`"
    local height="`echo $dims | cut -dx -f 2`"

    echo "-- Dimensions: $width x $height"

    # We need to (possibly) convert into a bunch of different sizes and processes
    run_conversion "$filename" $width $height "$BACKGROUND_SIZES" "$BACKGROUND_PATH"
    run_conversion "$filename" $width $height "$LOCKSCREEN_SIZES" "$LOCKSCREEN_PATH"
}

# Make sure all the directories exist
for bgSize in $BACKGROUND_SIZES; do
    mkdir -p $BACKGROUND_PATH/$bgSize
done

for bgSize in $LOCKSCREEN_SIZES; do
    mkdir -p $LOCKSCREEN_PATH/$bgSize
done

# Start converting the images
for img in `find $SOURCE_PATH -iregex '.*\.\(jpg\|png\|jpeg\)'`; do
    echo "Processing: $img"

    convert_image "$img"

    echo
    echo
done

