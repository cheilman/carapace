#!/usr/bin/env zsh
#
# Install go
#

autoload is-at-least

moduledir="${1:-/dev/null}"
generateddir="${2:-/dev/null}"

goenv_cache="${moduledir}/bin/goenv-cache"

arch="linux-amd64"
desired_version="1.11"

export GOPATH="$HOME/go"

#
# Try to detect a go install of the correct version
# NOTE: Highest version number wins, preference is given to items earlier in the list
#
install_locations=( "${GOROOT}/bin/go" "/usr/lib/google-golang/bin/go" "/usr/local/bin/go" "/usr/bin/go" "/bin/go" "${moduledir}/go/bin/go" )
found_goroot=""
currentver=""

for i in ${install_locations}; do
    if [ -x "$i" ]; then
        foundver="$( /usr/bin/env -i GOPATH=$GOPATH ${i} version 2> /dev/null | grep -Eoe '([0-9]+\.)+[0-9]+' )"
        if is-at-least "${desired_version}" "${foundver}" && is-at-least "${currentver}" "${foundver}"; then
            # Grab the go root
            found_goroot="$( /usr/bin/env -i GOPATH=$GOPATH "${i}" env | grep GOROOT | cut -d= -f2 | cut -d\" -f2 )"
            currentver=${foundver}
        fi
    fi
done

#
# Did we find a go installation?
#

if [ -d "${found_goroot}" -a -x "${found_goroot}/bin/go" ]; then
else
    #
    # We need to install it ourselves
    #

    dlfile="go${desired_version}.${arch}.tar.gz"
    dlurl="https://dl.google.com/go/${dlfile}"

    godir="${moduledir}/go"
    oldgodir="${godir}.old"

    carapace-message "magenta" "Unable to find go installation at least version ${desired_version}, downloading."

    ( cd /tmp && ${moduledir}/../01pre/bin/get $dlurl )

    if [ ! -r "/tmp/$dlfile" ]; then
        carapace-message "boldred" "Failed to download: ${dlurl}"
        exit 1
    fi

    # Move the existing install
    if [ -d "${godir}" ]; then
        mv "${godir}" "${oldgodir}"
    fi

    # Untar the install
    ( cd "${moduledir}" && pv -cN "un-tar" "/tmp/${dlfile}" | tar zxf - )
    err=$?

    if [ $err -ne 0 ]; then
        # Restore the old version as a fallback
        rm -Rf "${godir}"
        mv "${oldgodir}" "${godir}"
        carapace-message "boldred" "Failed to extract downloaded go install."
        exit $err
    fi

    # Remove downloaded file
    rm -f "/tmp/${dlfile}" || :

    # Remove old version
    if [ -d "${oldgodir}" ]; then
        rm -rf "${oldgodir}" || :
    fi

    # Save go root
    found_goroot="$( /usr/bin/env -i GOPATH=$GOPATH "${godir}/bin/go" env | grep GOROOT | cut -d= -f2 | cut -d\" -f2 )"
fi

#
# Assuming we have it discovered/installed, save the environment details for later
#

if [ -x "${found_goroot}/bin/go" ]; then
    carapace-message "cyan" "found go ${currentver} at ${found_goroot}"
    /usr/bin/env -i GOPATH=$GOPATH "${found_goroot}/bin/go" env | grep '^GO' | grep -v GOPATH | sed -e 's/^/export /' > "${goenv_cache}"

    # There are new GOCACHE requirements that don't always show up in the 'env'
    mkdir -p "$HOME/tmp/gocache" &>/dev/null || :
    echo "export GOCACHE='$HOME/tmp/gocache'" >> "${goenv_cache}"
else
    carapace-message "boldred" "Failed to find an approprite go installation under '${found_goroot}'!"
    exit 1
fi

