#!/usr/bin/env python3
#
# Return a short status line about a git repository
#

import subprocess
import os
import re

try:
    from subprocess import DEVNULL # py3k
except ImportError:
    DEVNULL = open(os.devnull, 'wb')

SHOW_ZEROS_DEFAULT = False

ANSI_ESCAPE_RE = re.compile(r'(\x9B|\x1B\[)[0-?]*[ -\/]*[@-~]')

COLOR_RESET         = '\033[0m'
COLOR_BOLD          = '\033[1m'
COLOR_UNDERLINE     = '\033[4m'
COLOR_BLINK         = '\033[5m'
COLOR_REVERSE       = '\033[7m'
COLOR_INVISIBLE     = '\033[8m'
COLOR_FG_BLACK      = '\033[30m'
COLOR_FG_RED        = '\033[31m'
COLOR_FG_GREEN      = '\033[32m'
COLOR_FG_YELLOW     = '\033[33m'
COLOR_FG_BLUE       = '\033[34m'
COLOR_FG_MAGENTA    = '\033[35m'
COLOR_FG_CYAN       = '\033[36m'
COLOR_FG_WHITE      = '\033[37m'
COLOR_BG_BLACK      = '\033[40m'
COLOR_BG_RED        = '\033[41m'
COLOR_BG_GREEN      = '\033[42m'
COLOR_BG_YELLOW     = '\033[43m'
COLOR_BG_BLUE       = '\033[44m'
COLOR_BG_MAGENTA    = '\033[45m'
COLOR_BG_CYAN       = '\033[46m'
COLOR_BG_WHITE      = '\033[47m'

FILE_STATUS_KEYS = {
    'modified': {'gitchar': 'M', 'outputchar': 'M', 'outputsort': 1, 'outputcolor': COLOR_FG_GREEN},
    'added':    {'gitchar': 'A', 'outputchar': '+', 'outputsort': 2, 'outputcolor': COLOR_BOLD + COLOR_FG_GREEN},
    'deleted':  {'gitchar': 'D', 'outputchar': '-', 'outputsort': 3, 'outputcolor': COLOR_BOLD + COLOR_FG_RED},
    'renamed':  {'gitchar': 'R', 'outputchar': 'R', 'outputsort': 4, 'outputcolor': COLOR_BOLD + COLOR_FG_YELLOW},
    'copied':   {'gitchar': 'C', 'outputchar': 'C', 'outputsort': 5, 'outputcolor': COLOR_BOLD + COLOR_FG_BLUE},
    'updated':  {'gitchar': 'U', 'outputchar': 'U', 'outputsort': 6, 'outputcolor': COLOR_BOLD + COLOR_FG_MAGENTA},
    'untracked':{'gitchar': '?', 'outputchar': '?', 'outputsort': 7, 'outputcolor': COLOR_FG_RED},
    'ignored':  {'gitchar': '!', 'outputchar': '!', 'outputsort': 8, 'outputcolor': COLOR_FG_CYAN},
}

def stripAnsi(str):
    return ANSI_ESCAPE_RE.sub('', str)

def getRepoName(dir=None):
    """ Figure out the repository name """

    if not dir:
        dir = os.getcwd()

    levels = 50
    while (not os.path.isdir(dir + "/.git")):
        dir = dir + "/.."
        if (levels > 0):
            levels = levels - 1
        else:
            raise Exception("Too many levels searching for .git")

    return os.path.basename(os.path.realpath(dir))

def getGitStatus(dir=None):
    """ Load the appropriately formatted status structure """

    origDir = None
    if (dir):
        origDir = os.getcwd()
        os.chdir(dir)

    try:
        # git -c color.status=always -c color.ui=always status -sb 2> /dev/null
        return subprocess.check_output(["git", "-c", "color.status=always", "-c", "color.ui=always", "status", "-sb"], stderr=DEVNULL, text=True)
    finally:
        if (origDir):
            os.chdir(origDir)

def getBranchLine(status):
    """ Parse the status to get the branch line """

    # Splits into lines, grab the first line, ignore the first three characters '## '
    return status.split("\n")[0][3:]

def getFileChangeCharacters(status):
    """ Return the two characters that indicate a file status """

    # Split into lines, ignore the first line, ignore whitespace lines, strip ansi from the line,
    # grab the first two characters
    return [stripAnsi(x)[0:2] for x in status.split("\n")[1:] if len(x.strip()) > 0]

def countKeysForFileChanges(changes):
    """ Turn a list of file change characters (from getFileChangeCharacters) into a mapping that indicates
        how many of each change is involved """

    retval = {}

    retval['modified'] = len([x for x in changes if 'M' in x])
    retval['added'] = len([x for x in changes if 'A' in x])
    retval['deleted'] = len([x for x in changes if 'D' in x])
    retval['renamed'] = len([x for x in changes if 'R' in x])
    retval['copied'] = len([x for x in changes if 'C' in x])
    retval['updated'] = len([x for x in changes if 'U' in x])
    retval['untracked'] = len([x for x in changes if '?' in x])
    retval['ignored'] = len([x for x in changes if '!' in x])

    return retval

def renderKey(key, keyChar, color, keyCount, keepZeros=SHOW_ZEROS_DEFAULT):
    """ Create colored text for the key and value.  If no keepZeros, print nothing. """
    if (keepZeros or keyCount[key] > 0):
        return " %s%s:%s" % (color, keyChar, keyCount[key])
    else:
        return ""

def parseFileStatusKeysToColoredSummaryString(changes, keepZeros=SHOW_ZEROS_DEFAULT):
    keyCounts = countKeysForFileChanges(changes)
    retval = ""

    for key in sorted(FILE_STATUS_KEYS, key=lambda key: FILE_STATUS_KEYS[key]['outputsort']):
        rec = FILE_STATUS_KEYS[key]

        retval = retval + renderKey(key, rec['outputchar'], rec['outputcolor'], keyCounts, keepZeros)

    return retval + COLOR_RESET

def pad(ansiStr, width, rightAlign=True):
    """ Pad the string to the width ignoring ANSI escape chars """
    adjustment = width - len(stripAnsi(ansiStr))

    if (adjustment > 0):
        if (rightAlign):
            return (" " * adjustment) + ansiStr
        else:
            return ansiStr + (" " * adjustment)
    else:
        return ansiStr

# Load/parse data
repo = getRepoName()
try:
    status = getGitStatus()
    branch = getBranchLine(status)
    chars = getFileChangeCharacters(status)
    keys = countKeysForFileChanges(chars)
    fileStatus = parseFileStatusKeysToColoredSummaryString(chars)

    # Manually do formatting, since we can't rely on printf widths with ANSI escapes
    statusString = "%s | %s |%s" % (pad(repo, 40), pad(branch, 40, False), fileStatus)
    statusString = statusString.rstrip()
except subprocess.CalledProcessError:
    statusString = "%s | %s |%s" % (pad(repo, 40), pad(COLOR_BOLD + COLOR_FG_RED + "<error>" + COLOR_RESET, 40, False), "")
    statusString = statusString.rstrip()

print(statusString)
