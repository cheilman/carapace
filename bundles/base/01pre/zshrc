#!zsh

#
# We're going to track our path in a temporary file, and then save it to a well-known location
#

pathCache="$(mktemp)"

save_path_to_cache ()
{
    /bin/cat >$pathCache <<EOF
#
# Path cache file
#
# Generated: $(/bin/date -u)
#

export PATH="$PATH"

EOF
}

#
# Source profile
#

. "$HOME/.profile"

# Disable ^S/^Q flow control
[[ $- == *i* ]] && stty -ixon

#
# Set umask
#
umask 022

#
# Set timezone
#

# Allow it to be overridden at the host
if [ -r "$HOME/.host/timezone" ]; then
    . "$HOME/.host/timezone"
else
    export TZ='America/New_York'
fi

#
# Load system-level environment stuff
#

if [ -f /etc/environment ]; then
    for line in $( cat /etc/environment ) ; do
        export $line
    done
fi

#
# Autoload Functions
#
autoload -U is-at-least

#
# Path Helper Functions
#

# Add to the end of the path.  Doesn't check for duplicates
add_path_back ()
{
    if [[ -d "$*" ]]; then
        if [[ -n "$PATH" ]]; then
            export PATH="$PATH:$*"
        else
            export PATH="$*"
        fi
    fi
}

# Add to the beginning of the path.  Doesn't check for duplicates
add_path_front ()
{
    if [[ -d "$*" ]]; then
        if [[ -n "$PATH" ]]; then
            export PATH="$*:$PATH"
        else
            export PATH="$*"
        fi
    fi
}

#
# Set up some paths
#

export PATH=""

add_path_back "$HOME/bin"
add_path_back "$HOME/bin/carapace"
add_path_back "$HOME/.local/bin"
add_path_back "/usr/local/bin"
add_path_back "/usr/bin"
add_path_back "/bin"
add_path_back "/usr/local/sbin"
add_path_back "/usr/sbin"
add_path_back "/sbin"
add_path_back "/usr/X11R6/bin"
add_path_back "/usr/X11/bin"
add_path_back "$HOME/programs/games"
add_path_back "/usr/games"
add_path_back "/usr/local/games"

#
# Colors
#

autoload colors
colors

#
# Color definitions (taken from Color Bash Prompt HowTo).
# Some colors might look different of some terminals.
# For example, I see 'Bold Red' as 'orange' on my screen,
# hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt.
#

for COLOR in Black Red Green Yellow Blue Magenta Cyan White; do
    eval $COLOR='%{$fg_no_bold[${(L)COLOR}]%}'
    eval B$COLOR='%{$fg_bold[${(L)COLOR}]%}'
    eval On_$COLOR='%{$bg[${(L)COLOR}]%}'
done
eval RESET='%{$reset_color%}'

# Colors are ${Color} or ${BColor} for bold.
NC=${RESET}

ALERT=${BWhite}${On_Red} # Bold White on red background

#################
# Shell Options #
#################

#
# Key bindings
#

# emacs bindings
bindkey -e

# ctrl + left/right go forward/backwords words
bindkey '^[[1;5C' emacs-forward-word
bindkey '^[[1;5D' emacs-backward-word

# del/home/end
bindkey '^[[3~' delete-char
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line

# push current command to the stack, give blank line, after execution
# original command pops back out
bindkey "^T" push-line-or-edit

# delete previous word (include path components as 'words')
# http://www.zsh.org/mla/users/2001/msg00870.html
tcsh-backward-delete-word () {
    local WORDCHARS="${WORDCHARS:s#/#}"
    zle backward-delete-word
}
zle -N tcsh-backward-delete-word
bindkey '^H' tcsh-backward-delete-word

#
# Changing directories
#
setopt AUTO_PUSHD

#
# Completion
#
setopt AUTO_LIST
unsetopt AUTO_NAME_DIRS
setopt ALWAYS_TO_END
unsetopt GLOB_COMPLETE
setopt LIST_AMBIGUOUS
unsetopt LIST_BEEP
setopt LIST_TYPES

#
# Expansion and Globbing
#

#
# Initialization
#

#
# Input/Output
#
setopt ALIASES
setopt CLOBBER
setopt CORRECT
unsetopt CORRECT_ALL
unsetopt FLOW_CONTROL
unsetopt MAIL_WARNING

#
# Job Control
#
unsetopt BG_NICE
setopt CHECK_JOBS
setopt LONG_LIST_JOBS
setopt NOTIFY

#
# Prompting
#
setopt PROMPT_CR
setopt PROMPT_SP
setopt PROMPT_PERCENT
setopt PROMPT_SUBST

#
# Scripts and Functions
#
setopt C_BASES
setopt C_PRECEDENCES

#
# Shell Emulation
#

#
# Zle
#
unsetopt BEEP

