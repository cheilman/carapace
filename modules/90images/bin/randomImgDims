#!/usr/bin/env zsh
#
# Find a random image from the given directory tree close to the given dimensions
#
# Usage: randomimg <dir> <width> <height>
#
# Directory must be a folder containing images grouped by dimensions as:
#   dir/width1xheight1
#   dir/width2xheight2
#   ...
#

TARGET_PERCENT_ERROR=32

usage() {
    echo
    echo "Usage: `basename $0` <dir> <width> <height>"
    echo
    exit 1
}

# Call with <actual> <expected>
percentError() {
    local actual=$1
    local expected=$2

    # Abs Diff
    local diff=$(( $actual - $expected ))
    [ $diff -lt 0 ] && diff=$(( - $diff ))

    # Err
    local err=$(( ( $diff * 100 ) / $expected ))

    echo $err
}

BASE_DIR="$1"
TARGET_WIDTH="$2"
TARGET_HEIGHT="$3"

#echo "$BASE_DIR -- $TARGET_WIDTH -- $TARGET_HEIGHT"

if [ -z "$BASE_DIR" -o ! -d "$BASE_DIR" ]; then
    >&2 echo "Invalid source directory."
    usage
fi

if [ -z "$TARGET_WIDTH" ]; then
    >&2 echo "Invalid target dimensions."
    usage
fi

if [ -z "$TARGET_HEIGHT" ]; then
    >&2 echo "Invalid target dimensions."
    usage
fi

targetPixels=$(( $TARGET_WIDTH * $TARGET_HEIGHT ))

#echo "Looking for images $TARGET_WIDTH x $TARGET_HEIGHT, or $targetPixels pixels"

#
# Figure out which sub paths are valid.  A valid dimension is one
# who's percent error is "small" for the given dimensions
#

imageDirs=( )

for i in `ls -1d $BASE_DIR/*/ | xargs -n 1 basename | grep -e '[1-9][0-9]*x[1-9][0-9]*'`; do
    # What're are the dimensions and pixel counts?
    dWidth="`echo $i | cut -dx -f 1`"
    dHeight="`echo $i | cut -dx -f 2`"
    dPixels=$(( $dWidth * $dHeight ))

    dErr=$( percentError $dPixels $targetPixels )
    #echo "$i: $dWidth x $dHeight : $dPixels : $dErr "

    if [ $dErr -lt $TARGET_PERCENT_ERROR ]; then
        #echo "Including $i"
        imageDirs+="$i"
    fi
done

#echo "Operating on:"
#printf '%s\n' "${imageDirs[@]}"

#
# Collect all things in those folders, output one randomly
#

(for i in $imageDirs; do
    ls -1 $BASE_DIR/$i/*
done) | shuf -n 1

